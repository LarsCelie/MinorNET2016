// Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace Minor.Dag19.AutoRestClient.Agents
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;
    using Microsoft.Rest;
    using Models;

    /// <summary>
    /// Extension methods for MonumentService.
    /// </summary>
    public static partial class MonumentServiceExtensions
    {
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IList<Monument> ApiMonumentenGet(this IMonumentService operations)
            {
                return Task.Factory.StartNew(s => ((IMonumentService)s).ApiMonumentenGetAsync(), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<Monument>> ApiMonumentenGetAsync(this IMonumentService operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiMonumentenGetWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='monument'>
            /// </param>
            public static void ApiMonumentenPost(this IMonumentService operations, Monument monument = default(Monument))
            {
                Task.Factory.StartNew(s => ((IMonumentService)s).ApiMonumentenPostAsync(monument), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='monument'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ApiMonumentenPostAsync(this IMonumentService operations, Monument monument = default(Monument), CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.ApiMonumentenPostWithHttpMessagesAsync(monument, null, cancellationToken).ConfigureAwait(false);
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static Monument ApiMonumentenByIdGet(this IMonumentService operations, int id)
            {
                return Task.Factory.StartNew(s => ((IMonumentService)s).ApiMonumentenByIdGetAsync(id), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Monument> ApiMonumentenByIdGetAsync(this IMonumentService operations, int id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiMonumentenByIdGetWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='monument'>
            /// </param>
            public static void ApiMonumentenByIdPut(this IMonumentService operations, int id, Monument monument = default(Monument))
            {
                Task.Factory.StartNew(s => ((IMonumentService)s).ApiMonumentenByIdPutAsync(id, monument), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='monument'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ApiMonumentenByIdPutAsync(this IMonumentService operations, int id, Monument monument = default(Monument), CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.ApiMonumentenByIdPutWithHttpMessagesAsync(id, monument, null, cancellationToken).ConfigureAwait(false);
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static void ApiMonumentenByIdDelete(this IMonumentService operations, int id)
            {
                Task.Factory.StartNew(s => ((IMonumentService)s).ApiMonumentenByIdDeleteAsync(id), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ApiMonumentenByIdDeleteAsync(this IMonumentService operations, int id, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.ApiMonumentenByIdDeleteWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false);
            }

    }
}
